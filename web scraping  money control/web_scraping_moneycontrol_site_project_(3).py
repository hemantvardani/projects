# -*- coding: utf-8 -*-
"""web_scraping_MONEYCONTROL_site_project (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SLzQnXyiPuDd8m7gYiD2vQvN0R5uhaiJ

# **Project to WEB SCRAPE the MONEYCONTROL site and Get real time Alert through mail**







---

# What **Objective** we have?
To Web Scrape the price of stocks from the Most Popular Indian Stock Market site for NIFTY 50 stocks. At the same time , notify user through mail service when price of stock has fallen below Trigger Price.

# **STEP-WISE PROCESS** ,  that we will follow?



**1**.    Web Scraping the MONEYCONTROL site to get list of all the NIFTY 50 stock.


**2**.   For all 50 stocks , scrape the price of it.


**3**.   Do send ALERT mail if price of stock has hit its' trigger price. 


---

## **STEP-** **1**. Web Scraping the MONEYCONTROL site to get list of all the NIFTY 50 stock.
"""

#import all necessary pakeges 

#They are    requests      ( used here for getting content of site) 
#            Beautifulsoup ( used here for web scraping)
#            smtplib       ( used here for send mails)
#            pandas        ( used here for creating dataframe) 
#            time          ( used here for to sleep execution for some momemts)
import pandas as pd
!pip install beautifulsoup4 --upgrade --quiet
from bs4 import BeautifulSoup
!pip install requests --upgrade --quiet
!pip install smtplib --upgrade --quiet
import requests
import time 
import smtplib

#url of money control site from where we will collect 50 nifty stock individual urls.
url = 'https://www.moneycontrol.com/markets/indian-indices/'


response= requests.get(url)

# HTTP response status code is 200 for successful responce

if response.status_code != 200 :
  raise Exception('Failed to load page {}'.format(nifty50_url))

# Whole content in a Variable

complete_content= response.text
complete_content[:100]

# Passing HTML content through beautifulSoup, so that we can perform desired operation later

doc=BeautifulSoup(response.text, 'html.parser')

# In HTML code , we can find all link of 50  stock in a tag
#find all is function to find a tag ,with some specified class ( here for example  with barlink class)

input_tag= doc.find_all('a', {'class': 'barLink'})

input_tag[:5]

names_of_stock=[] # variable to store all 50 stock name
url_of_stock=[]   # variable to store all 50 stock url
for i in input_tag:
 names_of_stock.append(i.text.strip()) 
 url_of_stock.append(i['href'])


#storing in DATAFRAME 
data={'Names' : names_of_stock, 'URL':url_of_stock}
df=pd.DataFrame(data)
df





"""# **STEP-** **2**. For all 50 stocks , scrape the price of it.

## NOW THIS IS OPTIONAL 
###  Sometimes to get fast result , we take only top 10 stocks into account



```
url_of_stock= url_of_stock[0:10]
```
"""

url_of_stock= url_of_stock[0:10]

#function to content STRING format like this '17,393.98' to FLOAT '17393.98'


def convert_to_FLOAT(s):
  string=''
  for i in range(0, len(s)):   # ',' is removed from string format
    if s[i]!=',':
        string=string+ s[i]
  new=0
  flag=0
  for i in range(0, len(string)): # string got is converted to FLOAT
    if string[i]=='.':
      flag=1
      index=i 
    elif flag==0:
      new=new*10 +int(string[i])
    else:
      new=new+ int(string[i])/pow(10,i-index)

  return new

# FOR LOOP to get all stocks price

price_of_stock=[]   # variable to store all 50 stocks price
# This price_of_stock variable is created here , to set trigger price here.
 


for i in url_of_stock:
  url=i
  res= requests.get(url)    # each url is parsed
  res.status_code
  if res.status_code != 200 :
    raise Exception('Failed to load page {}'.format(url))
  doc_each=BeautifulSoup(res.text, 'html.parser')
  input_tags_each= doc_each.find_all('input',{'id':'nsespotval'}) # price of stock is in input tag having nsespotval class

  
  
  stock_value_each=input_tags_each[0]['value']  # value is extacted 
  price_of_stock.append(convert_to_FLOAT(stock_value_each))   #fun called to convert string to float

# Now using price_of_stock variable we set trigger price of each stock as 90% of each stock price
# This is because , when price of stock goes below 10%( so price reach trigger price )  to the price we bought( price_of_stock) , then its time to square off 


trigger_price=[]
for i in price_of_stock:
  trigger_price.append(i*0.9)


table={'Buying_price' : price_of_stock, 'Trigger Price':trigger_price}
price_table=pd.DataFrame(table)
price_table



"""##  **STEP-** **3**. Do send ALERT mail if price of stock has hit its' trigger price.

***Note*** - Here enable the 'less secure service' of mail
"""

#Here we will  upload  a python file which will contain email id and its password of that mail id though which we want to send mail for alert
#here make python file having name email_filefile and  my_emailm variable storing mail address and password variable storing password in string format


from google.colab import files
files.upload()

# This file is imported
import email_filefile

# This function is called to send email

def send_me_email(my_emaill, password,stock_name, value):
  #global server
  server=smtplib.SMTP('smtp.gmail.com',587)
  server.ehlo()
  server.starttls()
  server.login(my_emaill,password)
 
  msg=f'subject: Price of {stock_name} has fallen below trigger price i.e.{value}  . Be alert '
  # This message will be received
  
  server.sendmail(
     
      my_emaill,my_emaill,msg

  )
  print('You have received an email ' )
  server.quit()

#We know that regularly we have to check price of each stock, after some duration (let say after every 5 minutes)
# So this function will return the updated price of all stocks in a list


new_price_of_stock=[]
def updated_value_of_stock(): 
  new_price_of_stock.clear()

  for i in url_of_stock:   # for all stock , we have to Update
    url=i
    res= requests.get(url)
    res.status_code
    if res.status_code != 200 :
      raise Exception('Failed to load page {}'.format(url))
    doc_each=BeautifulSoup(res.text, 'html.parser')
    input_tags_each= doc_each.find_all('input',{'id':'nsespotval'})
    
    
    
    stock_value_each=input_tags_each[0]['value']
    new_price_of_stock.append(convert_to_FLOAT(stock_value_each))
  return new_price_of_stock

# NOW , this is very crucial step
# we will let while loop run forever with 10 minutes(600 seconds) sleep after every run
# and after updating values of stock by calling updated_value_of_stock, we check whether price of stock has gone below trigger price(which was set initially ), if yes then mail to alert user.

while (True):
  updated_value_of_stock()
  for i in range(0, len(new_price_of_stock)):
      #print(i)
      if new_price_of_stock[i] > trigger_price[i]: # Here to see result we did '>', but in actually senario it will be '<'

        print( 'Trigger Price -', trigger_price[i], ' is reached below, of stock - ',names_of_stock[i] )
        send_me_email(email_filefile.my_emailm,email_filefile.password,names_of_stock[i],trigger_price[i])

  time.sleep(600)

"""---

# Future Advancement to this project

1. We would upload this on google cloud, so that it run  24 * 7 . Program such that from Monday - Friday when market open it initialise its trigger value and  any before market close , it notify us when needed to take action .

2. Here , trigger price is always 90% of buying price , but it can be improved if we calculate this trigger price using Machine Learning based on its flactuation history , recent news regarding that company, and other factor determining when should we sell.

---


---



---
"""